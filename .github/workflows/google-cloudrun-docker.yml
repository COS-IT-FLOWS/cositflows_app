# This workflow build and push a Docker container to Google Artifact Registry
# and deploy it on Cloud Run when a commit is pushed to the "main"
# branch.
#
# To configure this workflow:
#
# 1. Enable the following Google Cloud APIs:
#
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Cloud Run (run.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at
#    https://support.google.com/googleapi/answer/6158841.
#
# 2. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
#
#    Depending on how you authenticate, you will need to grant an IAM principal
#    permissions on Google Cloud:
#
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Cloud Run Developer (roles/run.developer)
#
#    You can learn more about setting IAM permissions at
#    https://cloud.google.com/iam/docs/manage-access-other-resources
#
# 3. Change the values in the "env" block to match your values.

name: 'Build and Deploy to Cloud Run'

# on: workflow_dispatch
on:
  push:
    branches: [ "production" ]

env:
  PROJECT_ID: 'insight-gather-440002' # TODO: update to your Google Cloud project ID
  SERVICE_ACCOUNT: 'build-and-deploy-account@insight-gather-440002.iam.gserviceaccount.com'
  REGION: 'asia-south1' # TODO: update to your region
  ARTIFACT_REPO: 'insight-gather-github-repo' # TODO: update to your service name
  IMAGE_NAME: 'production'
  SERVICE: 'insight-gather-serverless'
  WORKLOAD_IDENTITY_PROVIDER: 'projects/353021075835/locations/global/workloadIdentityPools/github-actions/providers/insight-gather-provider' # TODO: update to your workload identity provider

jobs:
  deploy:
    runs-on: 'ubuntu-latest'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # actions/checkout@v4

      # Step to replace a string in a JSON file
      - name: 'Replace Placeholder in Config JSON'
        id: 'replace-string'
        run: |
          sed -i 's|test-id|${{ secrets.MAPTILER_API_KEY }}|g' frontend_react/cos-frontend/src/config/config.json
          cat frontend_react/cos-frontend/src/config/config.json
        # Replace 'PLACEHOLDER' with the secret value in the specified JSON file
    


      # Configure Workload Identity Federation and generate an access token.
      #
      # See https://github.com/google-github-actions/auth for more options,
      # including authenticating via a JSON credentials file.
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@f112390a2df9932162083945e46d439060d66ec2' # google-github-actions/auth@v2
        with:
          service_account: '${{ env.SERVICE_ACCOUNT }}'
          project_id: '${{ env.PROJECT_ID }}'
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
  
      # BEGIN - Docker auth and build
      #
      # If you already have a container image, you can omit these steps.
      - name: 'Docker Auth'
        uses: 'docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567' # docker/login-action@v3
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.auth_token }}'
          registry: '${{ env.REGION }}-docker.pkg.dev'
  
      - name: 'Configure Docker Client of gcloud'
        run:  |-
          gcloud auth configure-docker --quiet
          gcloud auth configure-docker asia-south1-docker.pkg.dev --quiet
  
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          context: frontend_react/cos-frontend
          tags: "${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
      # END - Docker auth and build
      
      - name: 'Deploy to Cloud Run'
        id: deploy
        uses: 'google-github-actions/deploy-cloudrun@33553064113a37d688aa6937bacbdc481580be17' # google-github-actions/deploy-cloudrun@v2
        with:
          service: '${{ env.SERVICE }}'
          region: '${{ env.REGION }}'
          # NOTE: If using a pre-built image, update the image name below:
          image: '${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.ARTIFACT_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}'
    #  If required, use the Cloud Run URL output in later steps
      - name: 'Show output'
        run: |-
  
          echo ${{ steps.deploy.outputs.url }}
